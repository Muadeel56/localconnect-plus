version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: localconnect_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-localconnect_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and WebSocket support
  redis:
    image: redis:7-alpine
    container_name: localconnect_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./backend
      target: production
    container_name: localconnect_backend_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-localconnect_db}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
    volumes:
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    networks:
      - backend_network
      - frontend_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/accounts/current-user/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # React Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      target: production
    container_name: localconnect_frontend_prod
    volumes:
      - frontend_static:/usr/share/nginx/html
    networks:
      - frontend_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: localconnect_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    networks:
      - frontend_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery:
    build:
      context: ./backend
      target: production
    container_name: localconnect_celery_prod
    command: celery -A localconnect_backend worker -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-localconnect_db}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - backend_media:/app/media
    networks:
      - backend_network
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      target: production
    container_name: localconnect_celery_beat_prod
    command: celery -A localconnect_backend beat -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-localconnect_db}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - backend_media:/app/media
    networks:
      - backend_network
    depends_on:
      - db
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_media:
  backend_static:
  frontend_static:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge 